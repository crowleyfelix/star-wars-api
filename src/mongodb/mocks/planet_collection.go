// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/crowleyfelix/star-wars-api/src/mongodb/models"
import mongodb "github.com/crowleyfelix/star-wars-api/src/mongodb"

// PlanetCollection is an autogenerated mock type for the PlanetCollection type
type PlanetCollection struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *PlanetCollection) Delete(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *PlanetCollection) Find(_a0 *mongodb.PlanetSearchQuery, _a1 *mongodb.Pagination) (*models.PlanetPage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.PlanetPage
	if rf, ok := ret.Get(0).(func(*mongodb.PlanetSearchQuery, *mongodb.Pagination) *models.PlanetPage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlanetPage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mongodb.PlanetSearchQuery, *mongodb.Pagination) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: _a0
func (_m *PlanetCollection) FindByID(_a0 int) (*models.Planet, error) {
	ret := _m.Called(_a0)

	var r0 *models.Planet
	if rf, ok := ret.Get(0).(func(int) *models.Planet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *PlanetCollection) Insert(_a0 *models.Planet) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Planet) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *PlanetCollection) Update(_a0 *models.Planet) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Planet) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
