// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"

// RequestContext is an autogenerated mock type for the RequestContext type
type RequestContext struct {
	mock.Mock
}

// BindJSON provides a mock function with given fields: _a0
func (_m *RequestContext) BindJSON(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BindQuery provides a mock function with given fields: _a0
func (_m *RequestContext) BindQuery(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Data provides a mock function with given fields: _a0, _a1, _a2
func (_m *RequestContext) Data(_a0 int, _a1 string, _a2 []byte) {
	_m.Called(_a0, _a1, _a2)
}

// DefaultQuery provides a mock function with given fields: _a0, _a1
func (_m *RequestContext) DefaultQuery(_a0 string, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Header provides a mock function with given fields: _a0, _a1
func (_m *RequestContext) Header(_a0 string, _a1 string) {
	_m.Called(_a0, _a1)
}

// JSON provides a mock function with given fields: _a0, _a1
func (_m *RequestContext) JSON(_a0 int, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// NegotiateFormat provides a mock function with given fields: _a0
func (_m *RequestContext) NegotiateFormat(_a0 ...string) string {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Param provides a mock function with given fields: _a0
func (_m *RequestContext) Param(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ShouldBindJSON provides a mock function with given fields: _a0
func (_m *RequestContext) ShouldBindJSON(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
