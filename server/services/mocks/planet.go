// Code generated by mockery v1.0.0
package mocks

import errors "github.com/crowleyfelix/star-wars-api/server/errors"
import mock "github.com/stretchr/testify/mock"
import models "github.com/crowleyfelix/star-wars-api/server/models"
import services "github.com/crowleyfelix/star-wars-api/server/services"

// Planet is an autogenerated mock type for the Planet type
type Planet struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Planet) Create(_a0 *models.Planet) (*models.Planet, errors.Error) {
	ret := _m.Called(_a0)

	var r0 *models.Planet
	if rf, ok := ret.Get(0).(func(*models.Planet) *models.Planet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Planet)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(*models.Planet) errors.Error); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *Planet) Get(_a0 int) (*models.Planet, errors.Error) {
	ret := _m.Called(_a0)

	var r0 *models.Planet
	if rf, ok := ret.Get(0).(func(int) *models.Planet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Planet)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(int) errors.Error); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Remove provides a mock function with given fields: _a0
func (_m *Planet) Remove(_a0 int) errors.Error {
	ret := _m.Called(_a0)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(int) errors.Error); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *Planet) Search(_a0 *services.PlanetSearchParams, _a1 *services.Pagination) (*models.PlanetPage, errors.Error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.PlanetPage
	if rf, ok := ret.Get(0).(func(*services.PlanetSearchParams, *services.Pagination) *models.PlanetPage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlanetPage)
		}
	}

	var r1 errors.Error
	if rf, ok := ret.Get(1).(func(*services.PlanetSearchParams, *services.Pagination) errors.Error); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Validate provides a mock function with given fields: _a0
func (_m *Planet) Validate(_a0 *models.Planet) errors.Error {
	ret := _m.Called(_a0)

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(*models.Planet) errors.Error); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}
